package com.itsci.mju.maebanjumpen.controller;

import com.itsci.mju.maebanjumpen.dto.PenaltyDTO;
import com.itsci.mju.maebanjumpen.model.Penalty;
import com.itsci.mju.maebanjumpen.service.PenaltyService;
import com.itsci.mju.maebanjumpen.service.ReportService; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ ReportService
import com.itsci.mju.maebanjumpen.service.PersonService; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ PersonService
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/maeban/penalties")
@RequiredArgsConstructor // ‡πÉ‡∏ä‡πâ Constructor Injection ‡πÅ‡∏ó‡∏ô @Autowired
public class PenaltyController {

    private final PenaltyService penaltyService;
    // ‚ö†Ô∏è ‡∏•‡∏ö Repositories ‡πÅ‡∏•‡∏∞ Services ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Controller ‡∏≠‡∏≠‡∏Å
    // private final ReportService reportService;
    // private final PersonService personService;
    // private final HirerRepository hirerRepository;
    // private final HousekeeperRepository housekeeperRepository;

    @GetMapping
    public ResponseEntity<List<PenaltyDTO>> getAllPenalties() {
        List<PenaltyDTO> penalties = penaltyService.getAllPenalties();
        return ResponseEntity.ok(penalties);
    }

    @GetMapping("/{id}")
    public ResponseEntity<PenaltyDTO> getPenaltyById(@PathVariable int id) {
        PenaltyDTO penalty = penaltyService.getPenaltyById(id);
        if (penalty == null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(penalty);
    }

    @PostMapping
    public ResponseEntity<PenaltyDTO> createPenalty(@RequestBody PenaltyDTO penaltyDto) {
        try {
            PenaltyDTO savedPenalty = penaltyService.savePenalty(penaltyDto);
            // üí° ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Report ‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô PenaltyService.savePenalty ‡πÅ‡∏•‡πâ‡∏ß
            // Controller ‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏Ñ‡πà‡∏£‡∏±‡∏ö Request ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Service ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            return ResponseEntity.status(HttpStatus.CREATED).body(savedPenalty);
        } catch (Exception e) {
            System.err.println("Error creating penalty: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }


    @PutMapping("/{id}")
    public ResponseEntity<PenaltyDTO> updatePenalty(@PathVariable int id, @RequestBody PenaltyDTO penaltyDto) {
        try {
            PenaltyDTO updatedPenalty = penaltyService.updatePenalty(id, penaltyDto);
            // üí° ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô PenaltyService.updatePenalty ‡πÅ‡∏•‡πâ‡∏ß
            return ResponseEntity.ok(updatedPenalty);
        } catch (RuntimeException e) {
            System.err.println("Error updating penalty: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        } catch (Exception e) {
            System.err.println("Error during penalty update: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deletePenalty(@PathVariable int id) {
        penaltyService.deletePenalty(id);
        return ResponseEntity.noContent().build();
    }
}