package com.itsci.mju.maebanjumpen.controller;

import com.itsci.mju.maebanjumpen.dto.PenaltyDTO;
import com.itsci.mju.maebanjumpen.service.PenaltyService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/maeban/penalties")
@RequiredArgsConstructor
public class PenaltyController {

    private final PenaltyService penaltyService;

    /**
     * ‚úÖ **FIXED:** ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏•‡∏á‡πÇ‡∏ó‡∏©‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö Report ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏á‡πÇ‡∏ó‡∏©
     * üéØ ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏ö ID ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (hirerId ‡∏´‡∏£‡∏∑‡∏≠ housekeeperId) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏á‡πÇ‡∏ó‡∏©‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
     * * Request Example: POST /maeban/penalties?reportId=25&hirerId=3
     */
    @PostMapping
    public ResponseEntity<PenaltyDTO> createPenalty(
            @RequestBody PenaltyDTO penaltyDTO,
            @RequestParam("reportId") int reportId,
            @RequestParam(value = "hirerId", required = false) Integer hirerId, // Role ID ‡∏Ç‡∏≠‡∏á Hirer (Target)
            @RequestParam(value = "housekeeperId", required = false) Integer housekeeperId // Role ID ‡∏Ç‡∏≠‡∏á Housekeeper (Target)
    ) {

        // 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (Target Role ID)
        Integer targetRoleId = null;
        if (hirerId != null) {
            // ‡∏Å‡∏£‡∏ì‡∏µ‡∏•‡∏á‡πÇ‡∏ó‡∏© Hirer (Log ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏∑‡∏≠ Hirer Role ID 3)
            targetRoleId = hirerId;
        } else if (housekeeperId != null) {
            // ‡∏Å‡∏£‡∏ì‡∏µ‡∏•‡∏á‡πÇ‡∏ó‡∏© Housekeeper
            targetRoleId = housekeeperId;
        } else {
            // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ Role ID ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏ö‡∏∏‡∏°‡∏≤ ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Bad Request
            System.err.println("Error: Missing target Role ID (hirerId or housekeeperId) for penalty creation.");
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

        // 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ reportId ‡πÉ‡∏ô DTO
        penaltyDTO.setReportId(reportId);

        try {
            // 3. üéØ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Service ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö targetRoleId
            PenaltyDTO createdPenalty = penaltyService.savePenalty(penaltyDTO, targetRoleId);

            // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏∞‡∏™‡πà‡∏á HTTP 201 Created
            return new ResponseEntity<>(createdPenalty, HttpStatus.CREATED);
        } catch (IllegalArgumentException e) {
            System.err.println("Error creating penalty: " + e.getMessage());
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        } catch (Exception e) {
            System.err.println("Unexpected error creating penalty: " + e.getMessage());
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // --- CRUD Methods for Penalty ---

    @GetMapping
    public ResponseEntity<List<PenaltyDTO>> getAllPenalties() {
        List<PenaltyDTO> penalties = penaltyService.getAllPenalties();
        return new ResponseEntity<>(penalties, HttpStatus.OK);
    }

    @GetMapping("/{id}")
    public ResponseEntity<PenaltyDTO> getPenaltyById(@PathVariable int id) {
        PenaltyDTO penalty = penaltyService.getPenaltyById(id);
        if (penalty != null) {
            return new ResponseEntity<>(penalty, HttpStatus.OK);
        }
        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }

    @PutMapping("/{id}")
    public ResponseEntity<PenaltyDTO> updatePenalty(@PathVariable int id, @RequestBody PenaltyDTO penaltyDTO) {
        try {
            // NOTE: ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ó‡∏•‡∏á‡πÇ‡∏ó‡∏©‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Role ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏á‡πÇ‡∏ó‡∏©‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
            // ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô PenaltyType
            PenaltyDTO updatedPenalty = penaltyService.updatePenalty(id, penaltyDTO);
            return new ResponseEntity<>(updatedPenalty, HttpStatus.OK);
        } catch (RuntimeException e) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deletePenalty(@PathVariable int id) {
        try {
            penaltyService.deletePenalty(id);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}
