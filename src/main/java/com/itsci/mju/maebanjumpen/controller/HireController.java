package com.itsci.mju.maebanjumpen.controller;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.itsci.mju.maebanjumpen.dto.HireDTO;
import com.itsci.mju.maebanjumpen.exception.HirerNotFoundException;
import com.itsci.mju.maebanjumpen.exception.HousekeeperNotFoundException;
import com.itsci.mju.maebanjumpen.exception.InsufficientBalanceException;
import com.itsci.mju.maebanjumpen.model.Hire;
import com.itsci.mju.maebanjumpen.service.HireService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/maeban/hires")
public class HireController {

    @Autowired
    private HireService hireService;

    @GetMapping
    public ResponseEntity<List<HireDTO>> getAllHires() {
        try {
            List<HireDTO> hires = hireService.getAllHires();
            return ResponseEntity.ok(hires);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.internalServerError().build();
        }
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> getHireById(@PathVariable String id) {
        try {
            int hireId = Integer.parseInt(id);
            HireDTO hire = hireService.getHireById(hireId);
            return hire != null ? ResponseEntity.ok(hire) : ResponseEntity.notFound().build();
        } catch (NumberFormatException e) {
            return ResponseEntity.badRequest().body(Map.of("error", "Invalid hireId format"));
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.internalServerError().build();
        }
    }

    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> createHire(@RequestBody HireDTO hire) {

        // --- Comprehensive Validation Check ---

        // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö hireDetail (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô Log)
        if (hire.getHireDetail() == null || hire.getHireDetail().trim().isEmpty()) {
            return ResponseEntity.badRequest().body(Map.of("error", "hireDetail is required."));
        }

        // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö hireName
        if (hire.getHireName() == null || hire.getHireName().trim().isEmpty()) {
            return ResponseEntity.badRequest().body(Map.of("error", "hireName is required."));
        }

        // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö paymentAmount
        if (hire.getPaymentAmount() == null || hire.getPaymentAmount() <= 0) {
            return ResponseEntity.badRequest().body(Map.of("error", "paymentAmount must be a positive value."));
        }

        // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö startDate
        if (hire.getStartDate() == null) {
            return ResponseEntity.badRequest().body(Map.of("error", "startDate is required."));
        }

        // 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Hirer ID
        if (hire.getHirer() == null || hire.getHirer().getId() == null) {
            return ResponseEntity.badRequest().body(Map.of("error", "Hirer ID is required."));
        }

        // 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Housekeeper ID
        if (hire.getHousekeeper() == null || hire.getHousekeeper().getId() == null) {
            return ResponseEntity.badRequest().body(Map.of("error", "Housekeeper ID is required."));
        }
        // ----------------------------------------

        System.out.println("Received Hire for creation: " + hire);
        if (hire.getHirer() != null) {
            System.out.println("Hirer ID: " + hire.getHirer().getId());
        }
        if (hire.getHousekeeper() != null) {
            System.out.println("Housekeeper ID: " + hire.getHousekeeper().getId());
        }

        try {
            HireDTO savedHire = hireService.saveHire(hire);
            return new ResponseEntity<>(savedHire, HttpStatus.CREATED); // ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô 201 Created
        } catch (HirerNotFoundException | HousekeeperNotFoundException e) {
            System.err.println("Error creating hire: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("error", e.getMessage()));
        } catch (IllegalArgumentException e) {
            System.err.println("Error creating hire: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body(Map.of("error", e.getMessage()));
        } catch (Exception e) {
            System.err.println("Unexpected error creating hire: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.internalServerError().body(Map.of("error", "An unexpected error occurred: " + e.getMessage()));
        }
    }

    @PutMapping("/{hireId}")
    public ResponseEntity<?> updateHire(@PathVariable int hireId, @RequestBody HireDTO hireDetailsFromClient) {
        try {
            HireDTO updatedHire = hireService.updateHire(hireId, hireDetailsFromClient);

            if (updatedHire != null) {
                return ResponseEntity.ok(updatedHire);
            } else {
                return ResponseEntity.notFound().build();
            }
        } catch (InsufficientBalanceException e) {
            // ‡∏´‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏à‡πâ‡∏≤‡∏á
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of("error", e.getMessage()));
        } catch (HirerNotFoundException | HousekeeperNotFoundException e) { // ‡πÄ‡∏û‡∏¥‡πà‡∏° HousekeeperNotFoundException ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏à‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏°‡πà‡∏ö‡πâ‡∏≤‡∏ô
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("error", e.getMessage()));
        } catch (IllegalStateException e) {
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ‡πÄ‡∏ä‡πà‡∏ô hirerId, housekeeperId, ‡∏´‡∏£‡∏∑‡∏≠ paymentAmount ‡πÄ‡∏õ‡πá‡∏ô null
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of("error", e.getMessage()));
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.internalServerError().build();
        }
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    @PatchMapping(path = "/{hireId}/add-progression-images", consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<?> addProgressionImagesToHire(@PathVariable int hireId, @RequestBody List<String> imageUrls) {
        try {
            System.out.println("Received request to add progression images for hireId: " + hireId);
            System.out.println("Image URLs: " + imageUrls);
            HireDTO updatedHire = hireService.addProgressionImagesToHire(hireId, imageUrls);
            return ResponseEntity.ok(updatedHire);
        } catch (IllegalArgumentException e) {
            System.err.println("Error adding progression images: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("error", e.getMessage()));
        } catch (Exception e) {
            System.err.println("Unexpected error adding progression images: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.internalServerError().body(Map.of("error", "An unexpected error occurred: " + e.getMessage()));
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteHire(@PathVariable int id) {
        try {
            hireService.deleteHire(id);
            return ResponseEntity.noContent().build();
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.internalServerError().build();
        }
    }

    @GetMapping("/hirer/{hirerId}")
    public ResponseEntity<?> getHiresByHirerId(@PathVariable int hirerId) {
        try {
            List<HireDTO> hires = hireService.getHiresByHirerId(hirerId);
            return ResponseEntity.ok(hires);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.internalServerError().build();
        }
    }

    @GetMapping("/housekeepers/{housekeeperId}")
    public ResponseEntity<?> getHiresByHousekeeperId(@PathVariable int housekeeperId) {
        try {
            List<HireDTO> hires = hireService.getHiresByHousekeeperId(housekeeperId);
            return ResponseEntity.ok(hires); // ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏ó‡∏µ‡πà Jackson ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Serialize
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * üí° NEW ENDPOINT: ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ('Completed') ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Housekeeper ID ‡∏ô‡∏±‡πâ‡∏ô‡πÜ
     * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì 'Jobs Done' ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á Reviews
     */
    @GetMapping("/housekeepers/{housekeeperId}/completed")
    public ResponseEntity<?> getCompletedHiresByHousekeeperId(@PathVariable int housekeeperId) {
        try {
            // üí° ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Service method ‡πÉ‡∏´‡∏°‡πà
            List<HireDTO> hires = hireService.getCompletedHiresByHousekeeperId(housekeeperId);
            return ResponseEntity.ok(hires);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.internalServerError().build();
        }
    }
}
