package com.itsci.mju.maebanjumpen.mapper;

import com.itsci.mju.maebanjumpen.dto.HousekeeperDTO;
import com.itsci.mju.maebanjumpen.dto.HousekeeperDetailDTO;
import com.itsci.mju.maebanjumpen.model.Housekeeper;
import org.mapstruct.IterableMapping;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Named;
import java.util.List;
import java.util.Set; // üí° ‡∏ï‡πâ‡∏≠‡∏á Import Set
import java.util.stream.Collectors;

@Mapper(componentModel = "spring", uses = {HousekeeperSkillMapper.class, ReviewMapper.class, HireMapper.class})
public interface HousekeeperMapper {

    Housekeeper toEntity(HousekeeperDTO dto);
    List<Housekeeper> toEntityList(List<HousekeeperDTO> dtos);

    // üéØ toDto: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö List ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    @Mapping(target = "username", source = "person.login.username")
    // üí° ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Helper method (mapHiresToIds)
    @Mapping(target = "hireIds", source = "hires", qualifiedByName = "hiresToIds")
    @Named("baseHousekeeperMapping")
    HousekeeperDTO toDto(Housekeeper housekeeper);

    // üéØ toDetailDto: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    @Mapping(target = "username", source = "person.login.username")

    // üí° ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å HousekeeperDetailDTO ‡∏°‡∏µ List<HireDTO> hires ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á map ‡πÄ‡∏õ‡πá‡∏ô hireIds ‡πÉ‡∏ô DTO ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ
    @Mapping(target = "hireIds", ignore = true)

    // üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì jobsCompleted
    @Mapping(target = "jobsCompleted", expression = "java(housekeeper.getHires() != null ? (int) housekeeper.getHires().stream().filter(h -> \"Completed\".equals(h.getJobStatus()) || \"Reviewed\".equals(h.getJobStatus())).count() : 0)")

    // üéØ Map hires (Set<Hire>) -> hires (List<HireDTO>) ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡πÉ‡∏ä‡πâ HireMapper)
    @Mapping(target = "hires", source = "hires")

    // reviews ‡∏ñ‡∏π‡∏Å Map ‡πÉ‡∏ô Service ‡∏ï‡∏≤‡∏°‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏ß‡πâ
    @Mapping(target = "reviews", ignore = true)

    // dailyRate (String) ‡πÅ‡∏•‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å Map ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    HousekeeperDetailDTO toDetailDto(Housekeeper housekeeper);

    @IterableMapping(qualifiedByName = "baseHousekeeperMapping")
    List<HousekeeperDTO> toDtoList(List<Housekeeper> entities);

    // üéØ NEW: Helper method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á Set<Hire> ‡πÄ‡∏õ‡πá‡∏ô List<Integer>
    @Named("hiresToIds")
    default List<Integer> mapHiresToIds(Set<com.itsci.mju.maebanjumpen.model.Hire> hires) {
        if (hires == null) {
            return java.util.Collections.emptyList();
        }
        // ‡πÉ‡∏ä‡πâ getId ‡πÅ‡∏ó‡∏ô getHireId ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á Primary Key ID ‡∏Ç‡∏≠‡∏á Hire
        return hires.stream().map(com.itsci.mju.maebanjumpen.model.Hire::getHireId).collect(Collectors.toList());
    }
}