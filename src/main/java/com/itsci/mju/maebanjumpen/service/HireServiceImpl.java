package com.itsci.mju.maebanjumpen.service;

import com.itsci.mju.maebanjumpen.dto.HireDTO;
import com.itsci.mju.maebanjumpen.exception.HirerNotFoundException;
import com.itsci.mju.maebanjumpen.exception.HousekeeperNotFoundException;
import com.itsci.mju.maebanjumpen.exception.InsufficientBalanceException;
import com.itsci.mju.maebanjumpen.mapper.HireMapper;
import com.itsci.mju.maebanjumpen.model.Hire;
import com.itsci.mju.maebanjumpen.model.Hirer;
import com.itsci.mju.maebanjumpen.model.Housekeeper;
import com.itsci.mju.maebanjumpen.model.HousekeeperSkill;
import com.itsci.mju.maebanjumpen.model.SkillType;
import com.itsci.mju.maebanjumpen.repository.HireRepository;
import com.itsci.mju.maebanjumpen.repository.HirerRepository;
import com.itsci.mju.maebanjumpen.repository.HousekeeperRepository;
import com.itsci.mju.maebanjumpen.repository.SkillTypeRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class HireServiceImpl implements HireService {

    private final HireMapper hireMapper;
    private final HireRepository hireRepository;
    private final HirerService hirerService;
    private final HousekeeperService housekeeperService;
    private final HousekeeperSkillService housekeeperSkillService;
    // private final SkillTypeMapper skillTypeMapper; // ‚¨ÖÔ∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
    private final SkillTypeRepository skillTypeRepository;
    private final HirerRepository hirerRepository;
    private final HousekeeperRepository housekeeperRepository;

    // ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® HirerMapper, HousekeeperMapper ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ HireMapper ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Nested DTOs ‡πÄ‡∏≠‡∏á

    @Override
    @Transactional(readOnly = true)
    public List<HireDTO> getAllHires() {
        List<Hire> entities = hireRepository.findAll();
        return hireMapper.toDtoList(entities); // ‚¨ÖÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÄ‡∏õ‡πá‡∏ô toDtoList
    }

    @Override
    @Transactional(readOnly = true)
    public HireDTO getHireById(Integer id) {
        Hire hire = hireRepository.fetchByIdWithAllDetails(id)
                .orElseThrow(() -> new IllegalArgumentException("Hire with ID " + id + " not found."));
        return hireMapper.toDto(hire);
    }

    @Override
    @Transactional(readOnly = true)
    public List<HireDTO> getHiresByHirerId(Integer hirerId) {
        List<Hire> hires = hireRepository.findByHirerIdWithDetails(hirerId);
        return hireMapper.toDtoList(hires); // ‚¨ÖÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÄ‡∏õ‡πá‡∏ô toDtoList
    }

    @Override
    @Transactional(readOnly = true)
    public List<HireDTO> getHiresByHousekeeperId(Integer housekeeperId) {
        List<Hire> hires = hireRepository.findByHousekeeperIdWithDetails(housekeeperId);
        return hireMapper.toDtoList(hires); // ‚¨ÖÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÄ‡∏õ‡πá‡∏ô toDtoList
    }

    /**
     * üí° NEW SERVICE METHOD: ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ('Completed') ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Housekeeper ID ‡∏ô‡∏±‡πâ‡∏ô‡πÜ
     * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì 'Jobs Done' ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á Reviews
     */
    @Override
    @Transactional(readOnly = true)
    public List<HireDTO> getCompletedHiresByHousekeeperId(Integer housekeeperId) {
        // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        final String COMPLETED_STATUS = "Completed";

        // üí° ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Repository method ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Review ‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏°‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°
        List<Hire> completedHires = hireRepository.findByHousekeeperIdAndJobStatusWithDetails(housekeeperId, COMPLETED_STATUS);

        // Map Entity ‡πÑ‡∏õ DTO ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
        return hireMapper.toDtoList(completedHires);
    }

    @Override
    @Transactional
    public HireDTO saveHire(HireDTO hireDto) {
        // 1. ‡πÅ‡∏õ‡∏•‡∏á DTO ‡πÄ‡∏õ‡πá‡∏ô Entity ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á ID
        Hire hire = hireMapper.toEntity(hireDto);

        // 2. ‡∏î‡∏∂‡∏á Entity ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å ID ‡πÉ‡∏ô DTO (‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡πÄ‡∏î‡∏¥‡∏°)
        Hirer hirer = validateAndGetHirer(hire);
        hire.setHirer(hirer);

        Housekeeper housekeeper = validateAndGetHousekeeper(hire);
        hire.setHousekeeper(housekeeper);

        SkillType skillType = validateAndGetSkillType(hire);
        hire.setSkillType(skillType);

        // 3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
        // ‚ö†Ô∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ getter ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å DTO
        double totalPayment = calculateTotalPayment(housekeeper, skillType, hireDto.getAdditionalSkillTypeIds());
        hire.setPaymentAmount(totalPayment);

        // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö balance (‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡πÄ‡∏î‡∏¥‡∏°)
        if (hirer.getBalance() < hire.getPaymentAmount()) {
            throw new InsufficientBalanceException("Insufficient balance to create a hire.");
        }

        // 5. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Hire Name
        hire.setHireName(skillType.getSkillTypeName());

        // 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á Hire Detail ‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡πÄ‡∏î‡∏¥‡∏°)
        StringBuilder hireDetailBuilder = new StringBuilder();
        if (hireDto.getHireDetail() != null && !hireDto.getHireDetail().isEmpty()) {
            hireDetailBuilder.append(hireDto.getHireDetail());
        }

        if (hireDto.getAdditionalSkillTypeIds() != null && !hireDto.getAdditionalSkillTypeIds().isEmpty()) {
            String additionalSkillsString = hireDto.getAdditionalSkillTypeIds().stream()
                    .map(id -> skillTypeRepository.findById(id).map(SkillType::getSkillTypeName).orElse(null))
                    .filter(name -> name != null)
                    .collect(Collectors.joining(", "));

            if (!additionalSkillsString.isEmpty()) {
                if (hireDetailBuilder.length() > 0) {
                    hireDetailBuilder.append("\n");
                }
                hireDetailBuilder.append("Additional Services: ").append(additionalSkillsString);
            }
        }
        hire.setHireDetail(hireDetailBuilder.toString());

        // 7. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ DTO
        Hire savedHire = hireRepository.save(hire);
        Hire finalHire = hireRepository.fetchByIdWithAllDetails(savedHire.getHireId()).orElse(savedHire);
        return hireMapper.toDto(finalHire);
    }

    @Override
    @Transactional
    public HireDTO updateHire(Integer id, HireDTO hireDto)
            throws InsufficientBalanceException, HirerNotFoundException {
        // ... (‡πÇ‡∏Ñ‡πâ‡∏î updateHire ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß) ...
        Hire existingHire = hireRepository.fetchByIdWithAllDetails(id)
                .orElseThrow(() -> new IllegalArgumentException("Hire with ID " + id + " not found."));

        String oldStatus = existingHire.getJobStatus();
        String newStatus = hireDto.getJobStatus();

        if (newStatus != null && "Completed".equalsIgnoreCase(newStatus)
                && !"Completed".equalsIgnoreCase(oldStatus)) {
            // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏±‡∏Å‡∏©‡∏∞
            hirerService.deductBalance(existingHire.getHirer().getId(), existingHire.getPaymentAmount());
            housekeeperService.addBalance(existingHire.getHousekeeper().getId(), existingHire.getPaymentAmount());

            housekeeperSkillService.updateSkillLevelAndHiresCompleted(
                    existingHire.getHousekeeper().getId(),
                    existingHire.getSkillType().getSkillTypeId()
            );
        }

        if (newStatus != null) existingHire.setJobStatus(newStatus);
        if (hireDto.getHireName() != null) existingHire.setHireName(hireDto.getHireName());
        if (hireDto.getHireDetail() != null) existingHire.setHireDetail(hireDto.getHireDetail());
        if (hireDto.getHireDate() != null) existingHire.setHireDate(hireDto.getHireDate());
        if (hireDto.getStartDate() != null) existingHire.setStartDate(hireDto.getStartDate());
        if (hireDto.getStartTime() != null) existingHire.setStartTime(hireDto.getStartTime());
        if (hireDto.getEndTime() != null) existingHire.setEndTime(hireDto.getEndTime());
        if (hireDto.getLocation() != null) existingHire.setLocation(hireDto.getLocation());

        if (hireDto.getSkillType() != null
                && hireDto.getSkillType().getSkillTypeId() != null
                && !existingHire.getSkillType().getSkillTypeId()
                .equals(hireDto.getSkillType().getSkillTypeId())) {
            SkillType newSkillType = skillTypeRepository.findById(
                    hireDto.getSkillType().getSkillTypeId()
            ).orElseThrow(() ->
                    new IllegalArgumentException("SkillType with ID "
                            + hireDto.getSkillType().getSkillTypeId() + " not found."));
            existingHire.setSkillType(newSkillType);
        }

        Hire updatedHire = hireRepository.save(existingHire);
        Hire finalHire = hireRepository.fetchByIdWithAllDetails(updatedHire.getHireId()).orElse(updatedHire);
        return hireMapper.toDto(finalHire);
    }

    @Override
    @Transactional
    public void deleteHire(Integer id) {
        hireRepository.deleteById(id);
    }

    @Override
    @Transactional
    public HireDTO addProgressionImagesToHire(Integer hireId, List<String> imageUrls) {
        Hire hire = hireRepository.fetchByIdWithAllDetails(hireId)
                .orElseThrow(() -> new IllegalArgumentException("Hire with ID " + hireId + " not found."));
        if (hire.getProgressionImageUrls() == null) hire.setProgressionImageUrls(new ArrayList<>());
        hire.getProgressionImageUrls().addAll(imageUrls);

        Hire updatedHire = hireRepository.save(hire);
        return hireMapper.toDto(updatedHire);
    }

    // --- Helper methods (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö Entity) ---
    private double calculateTotalPayment(Housekeeper housekeeper, SkillType mainSkillType, List<Integer> additionalSkillTypeIds) {
        double totalPayment = 0.0;

        HousekeeperSkill mainSkill = housekeeper.getHousekeeperSkills().stream()
                .filter(s -> s.getSkillType().getSkillTypeId().equals(mainSkillType.getSkillTypeId()))
                .findFirst()
                .orElseThrow(() ->
                        new IllegalArgumentException("Housekeeper " + housekeeper.getId()
                                + " does not have main skill type " + mainSkillType.getSkillTypeId() + "."));
        totalPayment += mainSkill.getPricePerDay();

        if (additionalSkillTypeIds != null && !additionalSkillTypeIds.isEmpty()) {
            for (Integer additionalSkillId : additionalSkillTypeIds) {
                HousekeeperSkill additionalSkill = housekeeper.getHousekeeperSkills().stream()
                        .filter(s -> s.getSkillType().getSkillTypeId().equals(additionalSkillId))
                        .findFirst()
                        .orElseThrow(() ->
                                new IllegalArgumentException("Housekeeper " + housekeeper.getId()
                                        + " does not have additional skill type " + additionalSkillId + "."));
                totalPayment += additionalSkill.getPricePerDay();
            }
        }
        return totalPayment;
    }

    private Hirer validateAndGetHirer(Hire hire) {
        if (hire.getHirer() == null || hire.getHirer().getId() == null) {
            throw new IllegalArgumentException("Hirer ID is required for creating a hire.");
        }
        return hirerRepository.findById(hire.getHirer().getId())
                .orElseThrow(() -> new HirerNotFoundException("Hirer with ID "
                        + hire.getHirer().getId() + " not found."));
    }

    private Housekeeper validateAndGetHousekeeper(Hire hire) {
        if (hire.getHousekeeper() == null || hire.getHousekeeper().getId() == null) {
            throw new IllegalArgumentException("Housekeeper ID is required for creating a hire.");
        }
        return housekeeperRepository.findById(hire.getHousekeeper().getId())
                .orElseThrow(() -> new HousekeeperNotFoundException("Housekeeper with ID "
                        + hire.getHousekeeper().getId() + " not found."));
    }

    private SkillType validateAndGetSkillType(Hire hire) {
        if (hire.getSkillType() == null || hire.getSkillType().getSkillTypeId() == null) {
            throw new IllegalArgumentException("SkillType ID is required for creating a hire.");
        }
        return skillTypeRepository.findById(hire.getSkillType().getSkillTypeId())
                .orElseThrow(() -> new IllegalArgumentException("SkillType with ID "
                        + hire.getSkillType().getSkillTypeId() + " not found."));
    }
}
