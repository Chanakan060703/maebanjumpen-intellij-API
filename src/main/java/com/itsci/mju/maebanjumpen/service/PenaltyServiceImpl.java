package com.itsci.mju.maebanjumpen.service;

import com.itsci.mju.maebanjumpen.dto.PenaltyDTO;
import com.itsci.mju.maebanjumpen.mapper.PenaltyMapper;
import com.itsci.mju.maebanjumpen.model.Penalty;
import com.itsci.mju.maebanjumpen.model.Person;
import com.itsci.mju.maebanjumpen.model.Report;
import com.itsci.mju.maebanjumpen.model.PartyRole; // üí° ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ PartyRole
import com.itsci.mju.maebanjumpen.repository.PartyRoleRepository; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Dependency ‡πÉ‡∏´‡∏°‡πà
import com.itsci.mju.maebanjumpen.repository.PenaltyRepository;
import com.itsci.mju.maebanjumpen.repository.ReportRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
public class PenaltyServiceImpl implements PenaltyService {

    private final PenaltyMapper penaltyMapper;
    private final PenaltyRepository penaltyRepository;
    private final ReportRepository reportRepository;
    private final PersonService personService;
    private final PartyRoleRepository partyRoleRepository; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Dependency

    @Override
    public List<PenaltyDTO> getAllPenalties() {
        List<Penalty> penalties = penaltyRepository.findAll();
        return penaltyMapper.toDtoList(penalties);
    }

    @Override
    public PenaltyDTO getPenaltyById(int id) {
        return penaltyRepository.findById(id)
                .map(penaltyMapper::toDto)
                .orElse(null);
    }

    /**
     * üõë **‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:** ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ savePenalty(PenaltyDTO, Integer targetRoleId) ‡πÅ‡∏•‡πâ‡∏ß
     * ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Controller ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà
     */
    @Override
    @Transactional
    public PenaltyDTO savePenalty(PenaltyDTO penaltyDto) {
        throw new UnsupportedOperationException("Method savePenalty(PenaltyDTO) is deprecated. Use savePenalty(PenaltyDTO, Integer targetRoleId) instead.");
    }

    /**
     * ‚úÖ **‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:** ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÇ‡∏ó‡∏© ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏á‡πÇ‡∏ó‡∏©
     * @param penaltyDto ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÇ‡∏ó‡∏© (‡∏°‡∏µ reportId ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå)
     * @param targetRoleId ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó (Role ID ‡πÄ‡∏ä‡πà‡∏ô 3 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Hirer) ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÇ‡∏ó‡∏©
     * @return PenaltyDTO ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
     */
    @Transactional
    public PenaltyDTO savePenalty(PenaltyDTO penaltyDto, Integer targetRoleId) { // üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Signature
        if (targetRoleId == null) {
            throw new IllegalArgumentException("Target Role ID is required to apply penalty.");
        }

        // 1. Convert DTO to Entity and save the Penalty
        Penalty penalty = penaltyMapper.toEntity(penaltyDto);
        Penalty savedPenalty = penaltyRepository.save(penalty);

        // 2. Link Penalty to the owning Report Entity and update account status
        Integer reportId = penaltyDto.getReportId();
        if (reportId != null) {
            Optional<Report> optionalReport = reportRepository.findById(reportId);

            if (optionalReport.isPresent()) {
                Report report = optionalReport.get();

                // 2a. Set the new penalty on the Report (Report is the owning side)
                report.setPenalty(savedPenalty);
                // 2b. Update the report status to resolved/penalized
                report.setReportStatus("RESOLVED"); // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÇ‡∏ó‡∏© ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß
                reportRepository.save(report);

                // 2c. Update the account status of the penalized person
                updateAccountStatus(targetRoleId, savedPenalty.getPenaltyType()); // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà
            } else {
                System.err.println("Warning: Report ID " + reportId + " not found for new Penalty. Linking skipped.");
            }
        } else {
            System.err.println("Error: reportId is missing from PenaltyDTO. Cannot link Penalty to Report or update account status.");
        }

        return penaltyMapper.toDto(savedPenalty);
    }

    /**
     * ‚úÖ **‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà:** ‡∏î‡∏∂‡∏á Person ID ‡∏à‡∏≤‡∏Å Role ID ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
     * üéØ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Logic ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏á‡πÇ‡∏ó‡∏©‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ targetRoleId
     * @param targetRoleId ID ‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó (Role ID) ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÇ‡∏ó‡∏©
     * @param penaltyType ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÇ‡∏ó‡∏© (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ)
     */
    @Transactional
    private void updateAccountStatus(Integer targetRoleId, String penaltyType) {
        // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ PartyRole (Hirer/Housekeeper) ‡∏à‡∏≤‡∏Å Role ID ‡∏ó‡∏µ‡πà Frontend ‡∏£‡∏∞‡∏ö‡∏∏
        // NOTE: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ PartyRole Entity ‡πÇ‡∏´‡∏•‡∏î Person object ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢ (lazy load ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ @Transactional)
        Optional<PartyRole> optionalPartyRole = partyRoleRepository.findById(targetRoleId);

        if (optionalPartyRole.isPresent()) {
            PartyRole partyRole = optionalPartyRole.get();
            Person personToUpdate = partyRole.getPerson();

            if (personToUpdate != null) {
                personService.updateAccountStatus(personToUpdate.getPersonId(), penaltyType);
                System.out.println("Updated person account status to: " + penaltyType + " for person ID: " + personToUpdate.getPersonId());
            } else {
                System.err.println("Error: Person object is missing for Role ID: " + targetRoleId + ". Cannot update account status.");
            }
        } else {
            System.err.println("Error: Target PartyRole not found with ID: " + targetRoleId + ". Cannot apply penalty.");
        }
    }


    /**
     * ‡∏•‡∏ö Penalty ‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö Report
     * @param id ID ‡∏Ç‡∏≠‡∏á Penalty
     */
    @Override
    @Transactional
    public void deletePenalty(int id) {
        Optional<Penalty> optionalPenalty = penaltyRepository.findById(id);

        if (optionalPenalty.isPresent()) {
            Penalty penaltyToDelete = optionalPenalty.get();

            // 1. Find the related Report (Report is the owning side)
            if (penaltyToDelete.getReport() != null && penaltyToDelete.getReport().getReportId() != null) {
                reportRepository.findById(penaltyToDelete.getReport().getReportId()).ifPresent(report -> {
                    // 2. Unlink the Penalty from the Report (Owning side)
                    report.setPenalty(null);
                    report.setReportStatus("RESOLVED");
                    reportRepository.save(report);

                    // 3. Revert Account Status (TODO: ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏ó‡∏©)
                    System.out.println("Penalty ID " + id + " was unlinked from Report ID " + report.getReportId());
                });
            }
            // 4. Delete the Penalty
            penaltyRepository.delete(penaltyToDelete);
        }
    }

    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÇ‡∏ó‡∏©
     * üõë **‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:** ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡∏î‡∏π Warning ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)
     */
    @Override
    @Transactional
    public PenaltyDTO updatePenalty(int id, PenaltyDTO penaltyDto) {
        Penalty existingPenalty = penaltyRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Penalty not found with id: " + id));

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏ó‡∏©‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        boolean penaltyTypeChanged = penaltyDto.getPenaltyType() != null &&
                !existingPenalty.getPenaltyType().equals(penaltyDto.getPenaltyType());

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if (penaltyDto.getPenaltyType() != null) {
            existingPenalty.setPenaltyType(penaltyDto.getPenaltyType());
        }
        if (penaltyDto.getPenaltyDetail() != null) {
            existingPenalty.setPenaltyDetail(penaltyDto.getPenaltyDetail());
        }
        if (penaltyDto.getPenaltyDate() != null) {
            existingPenalty.setPenaltyDate(penaltyDto.getPenaltyDate());
        }
        if (penaltyDto.getPenaltyStatus() != null) {
            existingPenalty.setPenaltyStatus(penaltyDto.getPenaltyStatus());
        }

        Penalty updatedPenalty = penaltyRepository.save(existingPenalty);

        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏ó‡∏© ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        if (penaltyTypeChanged) {
            // üõë WARNING: Logic ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏ Target ‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏à‡∏≤‡∏Å Penalty Entity
            // ‡∏ã‡∏∂‡πà‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Target Role ID ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô DTO ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏î‡πâ‡∏ß‡∏¢
            System.err.println("Warning: Skipping account status update in updatePenalty method because the target person ID cannot be reliably determined from the existing entities.");
        }

        return penaltyMapper.toDto(updatedPenalty);
    }
}
