package com.itsci.mju.maebanjumpen.service;

import com.itsci.mju.maebanjumpen.dto.AccountManagerDTO;
import com.itsci.mju.maebanjumpen.mapper.AccountManagerMapper; // ‚¨ÖÔ∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Mapper
import com.itsci.mju.maebanjumpen.model.AccountManager; // ‚¨ÖÔ∏è ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Entity
import com.itsci.mju.maebanjumpen.repository.AccountManagerRepository;
import lombok.RequiredArgsConstructor; // ‚¨ÖÔ∏è ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô @Autowired
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor // Inject final fields
public class AccountManagerServiceImpl implements AccountManagerService {

    private final AccountManagerRepository accountManagerRepository;
    private final AccountManagerMapper accountManagerMapper; // ‚¨ÖÔ∏è Inject Mapper

    @Override
    public List<AccountManagerDTO> getAllAccountManagers() {
        // 1. ‡∏î‡∏∂‡∏á List<Entity>
        List<AccountManager> entities = accountManagerRepository.findAll();

        // 2. ‡πÅ‡∏õ‡∏•‡∏á List<Entity> ‡πÄ‡∏õ‡πá‡∏ô List<DTO> ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô
        return accountManagerMapper.toDtoList(entities);
    }

    @Override
    public AccountManagerDTO getAccountManagerById(int id) {
        // 1. ‡∏î‡∏∂‡∏á Entity
        AccountManager entity = accountManagerRepository.findById(id)
                .orElseThrow(() -> new NoSuchElementException("Account Manager not found with ID: " + id));

        // 2. ‡πÅ‡∏õ‡∏•‡∏á Entity ‡πÄ‡∏õ‡πá‡∏ô DTO ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô
        return accountManagerMapper.toDto(entity);
    }

    @Override
    public AccountManagerDTO saveAccountManager(AccountManagerDTO accountManagerDto) {
        // 1. ‡πÅ‡∏õ‡∏•‡∏á DTO ‡πÄ‡∏õ‡πá‡∏ô Entity
        AccountManager entity = accountManagerMapper.toEntity(accountManagerDto);

        // 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Entity
        AccountManager savedEntity = accountManagerRepository.save(entity);

        // 3. ‡πÅ‡∏õ‡∏•‡∏á Entity ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô DTO ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô
        return accountManagerMapper.toDto(savedEntity);
    }

    @Override
    public AccountManagerDTO updateAccountManager(int id, AccountManagerDTO accountManagerDto) {
        // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á Entity ‡πÄ‡∏î‡∏¥‡∏°
        AccountManager existingAccountManager = accountManagerRepository.findById(id)
                .orElseThrow(() -> new NoSuchElementException("Account Manager not found with ID: " + id));

        // 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ MapStruct ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà null ‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ Setter)
        // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ DTO ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        existingAccountManager.setManagerID(accountManagerDto.getManagerID());
        // üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï field ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ô PartyRole/Person ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢
        // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ MapStruct: mapper.updateAccountManagerFromDto(accountManagerDto, existingAccountManager);

        // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Entity ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        AccountManager updatedEntity = accountManagerRepository.save(existingAccountManager);

        // 4. ‡πÅ‡∏õ‡∏•‡∏á Entity ‡πÄ‡∏õ‡πá‡∏ô DTO ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô
        return accountManagerMapper.toDto(updatedEntity);
    }

    @Override
    public void deleteAccountManager(int id) {
        if (!accountManagerRepository.existsById(id)) {
            throw new NoSuchElementException("Account Manager not found with ID: " + id);
        }
        accountManagerRepository.deleteById(id);
    }
}