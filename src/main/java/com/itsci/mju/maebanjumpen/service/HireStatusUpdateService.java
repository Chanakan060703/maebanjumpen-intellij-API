// src/main/java/com/itsci/mju/maebanjumpen/service/HireStatusUpdateService.java
package com.itsci.mju.maebanjumpen.service;

import com.itsci.mju.maebanjumpen.model.Hire;
import com.itsci.mju.maebanjumpen.repository.HireRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.scheduling.TaskScheduler; // üéØ Import TaskScheduler
import org.springframework.scheduling.concurrent.ConcurrentTaskScheduler;

import java.time.Instant; // üéØ Import Instant
import java.time.LocalDateTime;
// ‡∏•‡∏ö‡∏û‡∏ß‡∏Å java.util.concurrent.Executors/ScheduledExecutorService/TimeUnit ‡∏≠‡∏≠‡∏Å

@Service
@RequiredArgsConstructor
public class HireStatusUpdateService {

    private final HireRepository hireRepository;
    // üéØ Inject TaskScheduler ‡∏Ç‡∏≠‡∏á Spring
    private final TaskScheduler taskScheduler;

    // ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Task ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Map
    // ‡πÅ‡∏ï‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏ô‡πâ‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô TaskScheduler ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ @Transactional ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡πÉ‡∏´‡πâ‡∏•‡∏ö Map ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢

    /**
     * ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ @Transactional ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï DB
     * ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢ TaskScheduler ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
     * @param hireId ID ‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏á
     */
    @Transactional
    public void revertStatus(Integer hireId) {
        // ‡∏î‡∏∂‡∏á Hire ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å DB ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        Hire hireToUpdate = hireRepository.findById(hireId).orElse(null);

        String latestStatus = hireToUpdate != null ? hireToUpdate.getJobStatus() : null;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô Reported)
        // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô (‡πÄ‡∏ä‡πà‡∏ô Admin ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Banned) ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö
        boolean shouldRevert = "Reported".equalsIgnoreCase(latestStatus);

        if (hireToUpdate != null && shouldRevert) {
            hireToUpdate.setJobStatus("Completed");
            hireRepository.save(hireToUpdate);
            System.out.println("‚úÖ Hire ID " + hireId + " status reverted from '" + latestStatus + "' to 'Completed' at " + LocalDateTime.now());
        } else {
            if (hireToUpdate == null) {
                System.err.println("Hire ID " + hireId + " not found when attempting to revert status.");
            } else {
                System.out.println("‚ö†Ô∏è Hire ID " + hireId + " status was not eligible for revert (Current: " + latestStatus + "). No revert performed.");
            }
        }
    }


    /**
     * ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 'Completed' ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
     * @param hireId ID ‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏à‡πâ‡∏≤‡∏á
     * @param delayInSeconds ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (long)
     */
    public void scheduleStatusRevert(Integer hireId, long delayInSeconds) {
        if (hireId == null) {
            System.err.println("Cannot schedule status revert: hireId is null.");
            return;
        }

        System.out.println("‚è≥ Scheduled Hire ID " + hireId + " to revert status to 'Completed' in " + delayInSeconds + " seconds.");

        // üéØ ‡πÉ‡∏ä‡πâ TaskScheduler ‡∏Ç‡∏≠‡∏á Spring ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ Spring Context
        taskScheduler.schedule(() -> {
            try {
                // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ @Transactional ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï DB
                revertStatus(hireId);
            } catch (Exception e) {
                System.err.println("‚ùå Error reverting status for Hire ID " + hireId + ": " + e.getMessage());
                e.printStackTrace(); // ‡∏û‡∏¥‡∏°‡∏û‡πå stack trace ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Debug
            }
        }, Instant.now().plusSeconds(delayInSeconds));
    }
}