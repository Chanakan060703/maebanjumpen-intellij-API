package com.itsci.mju.maebanjumpen.service;

import com.itsci.mju.maebanjumpen.dto.LoginDTO;
import com.itsci.mju.maebanjumpen.dto.PartyRoleDTO;
import com.itsci.mju.maebanjumpen.mapper.LoginMapper;
import com.itsci.mju.maebanjumpen.mapper.PartyRoleMapper; // ‚¨ÖÔ∏è IMPORT MAHPPER
import com.itsci.mju.maebanjumpen.model.*;
import com.itsci.mju.maebanjumpen.model.PasswordUtil;
import com.itsci.mju.maebanjumpen.repository.LoginRepository;
import com.itsci.mju.maebanjumpen.repository.PartyRoleRepository;
import com.itsci.mju.maebanjumpen.repository.PersonRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class LoginServiceImpl implements LoginService {

    private final LoginRepository loginRepository;
    private final PersonRepository personRepository;
    private final PartyRoleRepository partyRoleRepository; // ‚¨ÖÔ∏è ‡∏ï‡πâ‡∏≠‡∏á Inject PartyRoleRepository
    private final LoginMapper loginMapper;
    private final PartyRoleMapper partyRoleMapper; // ‚¨ÖÔ∏è INJECT MAPPER

    @Override
    @Transactional(readOnly = true)
    // üö® ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ PartyRoleDTO
    public PartyRoleDTO authenticate(String username, String password) {
        return findPartyRoleByLogin(username, password);
    }

    @Override
    @Transactional
    public LoginDTO saveLogin(LoginDTO loginDto) {
        Login login = loginMapper.toEntity(loginDto);
        if (login.getPassword() == null) {
            throw new IllegalArgumentException("Password cannot be null");
        }
        login.setPassword(PasswordUtil.hashPassword(login.getPassword()));
        Login savedLogin = loginRepository.save(login);
        return loginMapper.toDto(savedLogin);
    }

    @Override
    @Transactional(readOnly = true)
    public LoginDTO getLoginByUsername(String username) {
        Optional<Login> loginOpt = loginRepository.findById(username);
        return loginOpt.map(loginMapper::toDto).orElse(null);
    }

    @Override
    @Transactional
    public void deleteLogin(String username) {
        loginRepository.deleteById(username);
    }

    @Override
    public LoginDTO updateLogin(String username, LoginDTO loginDto) {
        return null;
    }

    @Override
    @Transactional(readOnly = true)
    // üö® ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ PartyRoleDTO
    public PartyRoleDTO findPartyRoleByLogin(String username, String rawPassword) {
        // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Login
        Optional<Login> loginOpt = loginRepository.findByUsername(username);
        if (loginOpt.isEmpty()) {
            return null;
        }

        Login storedLogin = loginOpt.get();
        String storedHash = storedLogin.getPassword();

        // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        if (!PasswordUtil.verifyPassword(rawPassword, storedHash)) {
            System.out.println("-> [LoginService] Authentication failed: Invalid password for user: " + username);
            return null;
        }

        // 3. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Person (‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Optional)
        // üí° ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ PersonRepository.findByLoginUsername ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Optional<Person> ‡πÅ‡∏•‡πâ‡∏ß
        Optional<Person> personOpt = personRepository.findByLoginUsername(username);
        if (personOpt.isEmpty()) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Person ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            System.out.println("-> [LoginService] Authentication failed: Person not found for user: " + username);
            return null;
        }
        Person person = personOpt.get(); // ‡∏î‡∏∂‡∏á Person object ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤

        // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        if (!"active".equalsIgnoreCase(person.getAccountStatus())) {
            System.out.println("-> [LoginService] Authentication failed: Account status is inactive for user: " + username);
            return null;
        }

        // 5. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ PartyRole ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏°‡∏ò‡∏≠‡∏î @EntityGraph
        // üö® ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î transactions ‡∏°‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
        List<PartyRole> roles = partyRoleRepository.findByPersonPersonId(person.getPersonId());

        if (roles.isEmpty()) {
            return null;
        }

        PartyRole role = roles.get(0);

        // 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Member ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        if (role instanceof Member && !"active".equalsIgnoreCase(person.getAccountStatus())) {
            return null;
        }

        // 7. üö® ‡πÅ‡∏õ‡∏•‡∏á Entity ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô DTO ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤
        return partyRoleMapper.toDto(role);
    }
}